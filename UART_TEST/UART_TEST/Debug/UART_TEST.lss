
UART_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000002dc  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  00800200  00800200  00000370  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000aeb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000d8  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000782  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000020d  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c74  00000000  00000000  00001581  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000214  00000000  00000000  000021f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000ea71  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000609  00000000  00000000  00010e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  00011486  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00003e7f  00000000  00000000  0001155e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	79 c0       	rjmp	.+242    	; 0x158 <__vector_25>
  66:	00 00       	nop
  68:	a9 c0       	rjmp	.+338    	; 0x1bc <__vector_26>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c3 c0       	rjmp	.+390    	; 0x218 <__vector_36>
  92:	00 00       	nop
  94:	f3 c0       	rjmp	.+486    	; 0x27c <__vector_37>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	aa 38       	cpi	r26, 0x8A	; 138
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	15 d0       	rcall	.+42     	; 0x130 <main>
 106:	e8 c0       	rjmp	.+464    	; 0x2d8 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <USART_Init>:
#define BAUD 4800
#define MYUBRR FOSC/16/BAUD-1

void USART_Init(unsigned int ubrr) {
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 10a:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 10e:	80 93 c4 00 	sts	0x00C4, r24
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 112:	88 e1       	ldi	r24, 0x18	; 24
 114:	80 93 c1 00 	sts	0x00C1, r24
	//Set frame format: 8data, 2stop bit
	UCSR0C = (3<<UCSZ00);
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	80 93 c2 00 	sts	0x00C2, r24
 11e:	08 95       	ret

00000120 <USART_Transmit>:
}

void USART_Transmit (unsigned char data) {
	//Wait for empty transmit buffer
	while ( !(UCSR0A & (1<<UDRE0)));
 120:	e0 ec       	ldi	r30, 0xC0	; 192
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <USART_Transmit+0x4>
	
	//Put data into buffer, sends the data
	UDR0 = data;
 12a:	80 93 c6 00 	sts	0x00C6, r24
 12e:	08 95       	ret

00000130 <main>:
}

int main(void) {
	//usart initialization function
	
	USART_Init(MYUBRR);
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	ea df       	rcall	.-44     	; 0x10a <USART_Init>
	
	while(1) {
		//Transmit HELLO to terminal
		
		USART_Transmit('H');
 136:	88 e4       	ldi	r24, 0x48	; 72
 138:	f3 df       	rcall	.-26     	; 0x120 <USART_Transmit>
		USART_Transmit('E');
 13a:	85 e4       	ldi	r24, 0x45	; 69
 13c:	f1 df       	rcall	.-30     	; 0x120 <USART_Transmit>
		USART_Transmit('L');
 13e:	8c e4       	ldi	r24, 0x4C	; 76
 140:	ef df       	rcall	.-34     	; 0x120 <USART_Transmit>
		USART_Transmit('L');
 142:	8c e4       	ldi	r24, 0x4C	; 76
 144:	ed df       	rcall	.-38     	; 0x120 <USART_Transmit>
		USART_Transmit('O');
 146:	8f e4       	ldi	r24, 0x4F	; 79
 148:	eb df       	rcall	.-42     	; 0x120 <USART_Transmit>
		USART_Transmit('!');
 14a:	81 e2       	ldi	r24, 0x21	; 33
 14c:	e9 df       	rcall	.-46     	; 0x120 <USART_Transmit>
		USART_Transmit('\r');
 14e:	8d e0       	ldi	r24, 0x0D	; 13
 150:	e7 df       	rcall	.-50     	; 0x120 <USART_Transmit>
		USART_Transmit('\n');
 152:	8a e0       	ldi	r24, 0x0A	; 10
 154:	e5 df       	rcall	.-54     	; 0x120 <USART_Transmit>
 156:	ef cf       	rjmp	.-34     	; 0x136 <main+0x6>

00000158 <__vector_25>:
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);

}/* uart_puts_p */
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	0b b6       	in	r0, 0x3b	; 59
 164:	0f 92       	push	r0
 166:	2f 93       	push	r18
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
 170:	80 91 c0 00 	lds	r24, 0x00C0
 174:	20 91 c6 00 	lds	r18, 0x00C6
 178:	8c 71       	andi	r24, 0x1C	; 28
 17a:	e0 91 47 02 	lds	r30, 0x0247
 17e:	ef 5f       	subi	r30, 0xFF	; 255
 180:	ef 71       	andi	r30, 0x1F	; 31
 182:	90 91 46 02 	lds	r25, 0x0246
 186:	e9 17       	cp	r30, r25
 188:	39 f0       	breq	.+14     	; 0x198 <__vector_25+0x40>
 18a:	e0 93 47 02 	sts	0x0247, r30
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	e6 5b       	subi	r30, 0xB6	; 182
 192:	fd 4f       	sbci	r31, 0xFD	; 253
 194:	20 83       	st	Z, r18
 196:	01 c0       	rjmp	.+2      	; 0x19a <__vector_25+0x42>
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	90 91 45 02 	lds	r25, 0x0245
 19e:	89 2b       	or	r24, r25
 1a0:	80 93 45 02 	sts	0x0245, r24
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0b be       	out	0x3b, r0	; 59
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <__vector_26>:
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	0b b6       	in	r0, 0x3b	; 59
 1c8:	0f 92       	push	r0
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	ef 93       	push	r30
 1d0:	ff 93       	push	r31
 1d2:	90 91 49 02 	lds	r25, 0x0249
 1d6:	80 91 48 02 	lds	r24, 0x0248
 1da:	98 17       	cp	r25, r24
 1dc:	69 f0       	breq	.+26     	; 0x1f8 <__vector_26+0x3c>
 1de:	e0 91 48 02 	lds	r30, 0x0248
 1e2:	ef 5f       	subi	r30, 0xFF	; 255
 1e4:	ef 71       	andi	r30, 0x1F	; 31
 1e6:	e0 93 48 02 	sts	0x0248, r30
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	e6 59       	subi	r30, 0x96	; 150
 1ee:	fd 4f       	sbci	r31, 0xFD	; 253
 1f0:	80 81       	ld	r24, Z
 1f2:	80 93 c6 00 	sts	0x00C6, r24
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <__vector_26+0x46>
 1f8:	e1 ec       	ldi	r30, 0xC1	; 193
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	8f 7d       	andi	r24, 0xDF	; 223
 200:	80 83       	st	Z, r24
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	0f 90       	pop	r0
 20c:	0b be       	out	0x3b, r0	; 59
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__vector_36>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	0b b6       	in	r0, 0x3b	; 59
 224:	0f 92       	push	r0
 226:	2f 93       	push	r18
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 230:	80 91 c8 00 	lds	r24, 0x00C8
    data = UART1_DATA;
 234:	20 91 ce 00 	lds	r18, 0x00CE
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
 238:	8c 71       	andi	r24, 0x1C	; 28
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 23a:	e0 91 02 02 	lds	r30, 0x0202
 23e:	ef 5f       	subi	r30, 0xFF	; 255
 240:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 242:	90 91 01 02 	lds	r25, 0x0201
 246:	e9 17       	cp	r30, r25
 248:	39 f0       	breq	.+14     	; 0x258 <__vector_36+0x40>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 24a:	e0 93 02 02 	sts	0x0202, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	eb 5f       	subi	r30, 0xFB	; 251
 252:	fd 4f       	sbci	r31, 0xFD	; 253
 254:	20 83       	st	Z, r18
 256:	01 c0       	rjmp	.+2      	; 0x25a <__vector_36+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 258:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 25a:	90 91 00 02 	lds	r25, 0x0200
 25e:	89 2b       	or	r24, r25
 260:	80 93 00 02 	sts	0x0200, r24
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	2f 91       	pop	r18
 26e:	0f 90       	pop	r0
 270:	0b be       	out	0x3b, r0	; 59
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_37>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	0b b6       	in	r0, 0x3b	; 59
 288:	0f 92       	push	r0
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 292:	90 91 04 02 	lds	r25, 0x0204
 296:	80 91 03 02 	lds	r24, 0x0203
 29a:	98 17       	cp	r25, r24
 29c:	69 f0       	breq	.+26     	; 0x2b8 <__vector_37+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 29e:	e0 91 03 02 	lds	r30, 0x0203
 2a2:	ef 5f       	subi	r30, 0xFF	; 255
 2a4:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 2a6:	e0 93 03 02 	sts	0x0203, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	eb 5d       	subi	r30, 0xDB	; 219
 2ae:	fd 4f       	sbci	r31, 0xFD	; 253
 2b0:	80 81       	ld	r24, Z
 2b2:	80 93 ce 00 	sts	0x00CE, r24
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <__vector_37+0x46>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 2b8:	e9 ec       	ldi	r30, 0xC9	; 201
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	8f 7d       	andi	r24, 0xDF	; 223
 2c0:	80 83       	st	Z, r24
    }
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	0f 90       	pop	r0
 2cc:	0b be       	out	0x3b, r0	; 59
 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
